{"meta":{"title":"衍之不觉得自己废话比较多","subtitle":null,"description":null,"author":"衍之","url":"http://www.yansera.com"},"pages":[{"title":"about","date":"2018-06-08T17:28:25.000Z","updated":"2018-06-25T12:27:55.682Z","comments":true,"path":"about/index.html","permalink":"http://www.yansera.com/about/index.html","excerpt":"","text":"Quelque chose de moi acger @ coder 暂时就先自称衍之好了~目前来讲还是觉得自己什么都不会，但是主要的精力放在大数据方面的算法的学习上面，梦想是能亲手实现人工智能（认真脸.jpg） 爱好： 弹弹吉他写写歌，芳文社，p社 邮箱： jixiong.liu@qq.com QQ： 522988394 （常年不用，慎选） 语言： 中文&lt;废话&gt; 法语&lt;半母语？&gt; 英语&lt;大概大六吧没考过&gt; 日语＜あいうえお水平＞ hello world级别技术： java · php · javascrip · C# · C · labview · MathLab · Linux · SQL etc…（突然觉得列出来没有意义） 自己觉得还可以的东西： python · R 正在主攻的方向： Machine Learning 衍之这个名来自于我的辈分，我在家里排衍字辈，自己很喜欢，so一般的社交网站的昵称都会使用这个字。 家里勉强算是一个IT世家，所以长大后慢慢也跟着往这个方向靠拢，不过由于某些技术性原因学习路上只是自己一个人在单干（貌似全世界程序员都是这样啊喂），真正开始下定决心走大数据这个方向是在17年初，原因是喜欢蹂躏数据的快感（不是hentai！），还有lance一个脚本后等计算机计算几个小时那种悠闲。 最喜欢的角色是牧濑红莉栖动漫的话啥都看看，平时没事也写写歌什么的（虽然难听得一比） 忍不住镶嵌一张私图镇站，而后是友链区 友链区 刚刚入门其实交流还是很少的所以欢迎勾搭蹭友链233讨论动漫的小伙伴极度欢迎~ 链接 简介 yann_y 安全/他让我问他他是傻逼么 est Android Developer，Coder &amp; ACGer unnamed42 hexo主题开发基础详解，受益良多 icorgi 红色光芒下的安全人员"},{"title":"tags","date":"2018-06-08T16:55:28.000Z","updated":"2018-06-08T20:48:49.520Z","comments":true,"path":"all-tags/index.html","permalink":"http://www.yansera.com/all-tags/index.html","excerpt":"","text":""},{"title":"all-categories","date":"2018-06-08T17:17:31.000Z","updated":"2018-06-08T17:23:04.083Z","comments":true,"path":"all-categories/index.html","permalink":"http://www.yansera.com/all-categories/index.html","excerpt":"","text":""},{"title":"all-archives","date":"2018-06-08T17:24:31.000Z","updated":"2018-06-08T17:24:57.539Z","comments":true,"path":"all-archives/index.html","permalink":"http://www.yansera.com/all-archives/index.html","excerpt":"","text":""}],"posts":[{"title":"Sooyalo主题-一款乱七八的华丽主题~","slug":"Sooyalo主题-一款乱七八的华丽主题","date":"2018-06-24T15:32:06.000Z","updated":"2018-07-09T14:31:41.756Z","comments":true,"path":"2018/06/24/Sooyalo主题-一款乱七八的华丽主题/","link":"","permalink":"http://www.yansera.com/2018/06/24/Sooyalo主题-一款乱七八的华丽主题/","excerpt":"选择好搭建空间后，进而选择一个合适的主题便成为了首要任务，一开始本想直接应用NEXT主题，但考虑到它让大部分使用者失去个人特色的恐怖应用量以及我所厌恶的极简主义，所以选择以themia主题为基础进行一定程度的个人化修改，最后脸滚键盘取了一个谁也不知道什么意思的名字。这就是Sooyalo的由来。","text":"选择好搭建空间后，进而选择一个合适的主题便成为了首要任务，一开始本想直接应用NEXT主题，但考虑到它让大部分使用者失去个人特色的恐怖应用量以及我所厌恶的极简主义，所以选择以themia主题为基础进行一定程度的个人化修改，最后脸滚键盘取了一个谁也不知道什么意思的名字。这就是Sooyalo的由来。 如何搭建好Hexo框架以及Github Page服务器？相比于坑死人的Hexo超（la）级（ji）官方文档，我更倾向于知乎大神给的最简单直白的新手教程，每一步都介绍得不多不少，很详细，直接上链接就好 GitHub+Hexo 搭建个人网站详细教程 什么是themia主题？themia是由kaedea以tranquilpeak为基础进行一定额度的个人化以及中国本土化修改而形成的华丽的 Hexo 响应式主题，以ejs语言编写。对于themia主题各项功能，kaedea在其个人博客中已经有详细的介绍（HEXO 响应式主题・ THEMIA）。之所以选择这个主题是因为看中了它丰富的图片处理能力以及简单易懂的结构，方便对其进行个人化加工。另外，它对于手机端的特殊加工也是该主题的一大特色，虽然我已经放弃了手机端的优化。 相比于themia，乱七八糟的Sooyalo有何不同？之所以叫它乱七八糟，主要是因为我所添加的多半都是小部件，对于本体结构其实并没有太大的改变。而且目测…大概不会有人会选择直接使用本主题（反正这博客也是自己写着玩的），所以干脆直接把这些部件的代码全部直接写出来或许会比较合适一些.. fireworks的鼠标交互特效本着和极简主义说不的精神，我使用了anime.js连同canvas画布铺盖整个网页，再用css将它至于顶层便可直接使之生效。首先是js语言进行脚本的架构。fireworks.js：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134window.human = false;var canvasEl = document.querySelector(&apos;.fireworks&apos;);var ctx = canvasEl.getContext(&apos;2d&apos;);var numberOfParticules = 30;var pointerX = 0;var pointerY = 0;var tap = (&apos;ontouchstart&apos; in window || navigator.msMaxTouchPoints) ? &apos;touchstart&apos; : &apos;mousedown&apos;;var colors = [&apos;#FF1461&apos;, &apos;#18FF92&apos;, &apos;#5A87FF&apos;, &apos;#FBF38C&apos;];function setCanvasSize() &#123; canvasEl.width = window.innerWidth * 2; canvasEl.height = window.innerHeight * 2; canvasEl.style.width = window.innerWidth + &apos;px&apos;; canvasEl.style.height = window.innerHeight + &apos;px&apos;; canvasEl.getContext(&apos;2d&apos;).scale(2, 2);&#125;function updateCoords(e) &#123; pointerX = e.clientX || e.touches[0].clientX; pointerY = e.clientY || e.touches[0].clientY;&#125;function setParticuleDirection(p) &#123; var angle = anime.random(0, 360) * Math.PI / 180; var value = anime.random(50, 180); var radius = [-1, 1][anime.random(0, 1)] * value; return &#123; x: p.x + radius * Math.cos(angle), y: p.y + radius * Math.sin(angle) &#125;&#125;function createParticule(x,y) &#123; var p = &#123;&#125;; p.x = x; p.y = y; p.color = colors[anime.random(0, colors.length - 1)]; p.radius = anime.random(16, 32); p.endPos = setParticuleDirection(p); p.draw = function() &#123; ctx.beginPath(); ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, true); ctx.fillStyle = p.color; ctx.fill(); &#125; return p;&#125;function createCircle(x,y) &#123; var p = &#123;&#125;; p.x = x; p.y = y; p.color = &apos;#FFF&apos;; p.radius = 0.1; p.alpha = .5; p.lineWidth = 6; p.draw = function() &#123; ctx.globalAlpha = p.alpha; ctx.beginPath(); ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, true); ctx.lineWidth = p.lineWidth; ctx.strokeStyle = p.color; ctx.stroke(); ctx.globalAlpha = 1; &#125; return p;&#125;function renderParticule(anim) &#123; for (var i = 0; i &lt; anim.animatables.length; i++) &#123; anim.animatables[i].target.draw(); &#125;&#125;function animateParticules(x, y) &#123; var circle = createCircle(x, y); var particules = []; for (var i = 0; i &lt; numberOfParticules; i++) &#123; particules.push(createParticule(x, y)); &#125; anime.timeline().add(&#123; targets: particules, x: function(p) &#123; return p.endPos.x; &#125;, y: function(p) &#123; return p.endPos.y; &#125;, radius: 0.1, duration: anime.random(1200, 1800), easing: &apos;easeOutExpo&apos;, update: renderParticule &#125;) .add(&#123; targets: circle, radius: anime.random(80, 160), lineWidth: 0, alpha: &#123; value: 0, easing: &apos;linear&apos;, duration: anime.random(600, 800), &#125;, duration: anime.random(1200, 1800), easing: &apos;easeOutExpo&apos;, update: renderParticule, offset: 0 &#125;);&#125;var render = anime(&#123; duration: Infinity, update: function() &#123; ctx.clearRect(0, 0, canvasEl.width, canvasEl.height); &#125;&#125;);document.addEventListener(tap, function(e) &#123; window.human = true; render.play(); updateCoords(e); animateParticules(pointerX, pointerY);&#125;, false);var centerX = window.innerWidth / 2;var centerY = window.innerHeight / 2;function autoClick() &#123; if (window.human) return; animateParticules( anime.random(centerX-50, centerX+50), anime.random(centerY-50, centerY+50) ); anime(&#123;duration: 200&#125;).finished.then(autoClick);&#125;setCanvasSize();window.addEventListener(&apos;resize&apos;, setCanvasSize, false); 而后利用css对其位置进行定义fireworks.css：1234567891011.fireworks &#123; position: fixed; z-index: 99; pointer-events: none; top: 0; left: 0; widows: 100%; height: 100%; display: inline-block; box-sizing: border-box;&#125; 另外也需要引用anime.js的官方配置anime.min.js1&lt;script src=&quot;https://cdn.bootcss.com/animejs/2.0.2/anime.min.js&quot;&gt;&lt;/script&gt; 这样子差不多就万事OK，把两个js脚本以及css导入后，在layout之类的布局脚本中直接利用canvas标签来引用就可以做到全站使用了~1&lt;canvas class=&quot;fireworks&quot;&gt;&lt;/canvas&gt; live2D桌面人物页面右下角的随鼠标摇摆的二次元人偶，看似很复杂，实际上应用起来非常简单（因为人家已经开过源了233【hexo-helper-live2d】）。先回到hexo框架的博客文件夹，shift右键进入命令窗，输入：1npm install --save hexo-helper-live2d 该插件就算是安装好了~而后进入主题的_config.yml文件中123live2d: model: koharu bottom: -60 人偶就算布置完成了~其实对于live2d还可以进行很多方面的修改，具体如下1234567891011121314live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ model: use: live2d-widget-model-wanko display: position: right width: 150 height: 300 mobile: show: true 另外live2D拥有多个model以供选择，我把所有model的名字都列出来，有兴趣的话可以一个一个常识一下12345678910111213141516171819202122live2d-widget-model-chitoselive2d-widget-model-epsilon2_1live2d-widget-model-gflive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)live2d-widget-model-harutolive2d-widget-model-hibikilive2d-widget-model-hijikilive2d-widget-model-izumilive2d-widget-model-koharulive2d-widget-model-mikulive2d-widget-model-ni-jlive2d-widget-model-nicolive2d-widget-model-nietzschelive2d-widget-model-nipsilonlive2d-widget-model-nitolive2d-widget-model-shizukulive2d-widget-model-tororolive2d-widget-model-tsumikilive2d-widget-model-unitychanlive2d-widget-model-wankolive2d-widget-model-z16 为你的hexo添加色气满满的live2d吧！我先对着我的koharu傻笑30分钟再接着写（吸口水） 文章目录我一直很困惑为什么themia这个已经基本成熟的主题的框架为什么没有一个文章的目录部件。所以还是自己动手丰衣足食好了.按照官方文档，直接引用toc函数就可以自动生成一篇文章的目录了。可以选择单独创立一个toc.ejs组件12345&lt;% if (post.toc != false) &#123; %&gt;&lt;div id=&quot;toc&quot;&gt; &lt;%- toc(post.content, &#123;list_number: false&#125;) %&gt;&lt;/div&gt;&lt;% &#125; %&gt; 然后相对应的css进行布局：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#toc &#123; position: fixed; right: 0%; width: 320px; height: 90%; top: 15px;&#125;for i in (1..6) &#123; .toc-level-&#123;i&#125; .toc-text &#123;margin-left: i em;&#125;&#125;.toc-text &#123;white-space: nowrap;&#125;.toc-link &#123; color: #999; display: inline-block; // stretch to parent height border-left: 1px solid transparent; // avoid &quot;jumping&quot; on hover &amp;:hover &#123;text-decoration: none;&#125;&#125;.toc &#123; padding: 0; margin: 0; line-height: 1.8em; overflow-y: auto; overflow-x: hidden; width: 100%; height: 100%;&#125;.toc-child &#123; margin-left: 0; padding-left: 0;&#125;.toc-item &#123; list-style-type: none; &amp;:hover &gt; .toc-link &#123;border-left: 1px solid $color-theme;&#125; &amp;.active &#123; &gt; .toc-link &#123; color: $color-theme; border-left: 2px solid $color-theme; &#125; if(hexo-config(&apos;toc.collapse&apos;)) &#123; .toc-child &#123;display: block;&#125; &#125; &#125;&#125;.toc-item.active .toc-child &#123; display: block; &#125; 最后利用1&lt;%- partial() %&gt; 函数将toc.ejs放置在合适的位置就好。位置一定要选对，否则很可能会出现逻辑bug（跪了两天），一个超级简单的toc组件就算完成了~之后我可能会进一步完善这一部分，比如说加上动画效果，或者随画面而动之类的。以后的事嘛.最近略忙。 百分比样式回到顶部按钮就是左下角那个圆形的随着页面改变数字会动，按一下就会回到顶部的家伙，主要参考了unnamed42的使用方法，并且针对我的博客进行一些逻辑上和位置上的调整，首先是ejs文件和css文件totop.ejs(还是画布…..)1234&lt;div id=&quot;totop&quot; title=&quot;&lt;%= __(&apos;to_top&apos;) %&gt;&quot;&gt; &lt;canvas id=&quot;totop-canvas&quot; width=&quot;48&quot; height=&quot;48&quot;&gt;&lt;/canvas&gt; &lt;div id=&quot;totop-percent&quot;&gt;&lt;/div&gt;&lt;/div&gt; totop.css1234567891011121314151617181920212223242526272829303132333435363738394041#totop &#123; background-color: #eee; border-radius: 100%; bottom: 5%; height: 48px; width: 48px; top: 78%; left: 320px; position: fixed; right: -100px; z-index: 99; -webkit-transition: 0.5s; -moz-transition: 0.5s; transition: 0.5s;&#125;#totop.display &#123;right: 10px;&#125;#totop-percent &#123; font-size: 16px; height: 48px; line-height: 48px; position: absolute; text-align: center; top: 0; width: 48px; color: #555; cursor: pointer;&#125;#totop-percent:before &#123;content:attr(data-percent);&#125;#totop-percent:hover:before &#123; display: inline-block; font: 14px/1em FontAwesome; font-size: inherit; text-rendering: auto; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; content: &quot;\\f176&quot;;&#125; 再js加入脚本，实现画圆圈，箭头等功能1234567891011121314151617181920212223242526272829303132333435363738$(function() &#123; var totop = $(&quot;#totop&quot;), canvas = $(&quot;#totop-canvas&quot;), percent = $(&quot;#totop-percent&quot;), width = canvas.width(), height = canvas.height(), center = width / 2, radius = parseInt((width - 3) / 2), ctx = canvas[0].getContext(&quot;2d&quot;); function drawCircle(color, percent) &#123; ctx.beginPath(); ctx.arc(center, center, radius, - Math.PI / 2, Math.PI * 1.5 * percent, false); ctx.strokeStyle = color; ctx.lineCap = &quot;round&quot;; // butt, round or square ctx.lineWidth = 3; ctx.stroke(); &#125; totop.click(function() &#123; $(&quot;body, html&quot;).animate(&#123; scrollTop: 0 &#125;, 800); &#125;); $(window).scroll(function() &#123; var docHeight = $(document).height() - $(window).height(), scrollTop = $(window).scrollTop(), per = parseInt(scrollTop / docHeight * 100); if (scrollTop &gt;= 200) &#123; totop.addClass(&quot;display&quot;); ctx.clearRect(0, 0, width, height); drawCircle(&quot;#efefef&quot;, 1); drawCircle(&quot;#555555&quot;, per/100); &#125; else totop.removeClass(&quot;display&quot;); percent.attr(&quot;data-percent&quot;, per); &#125;);&#125;); 在post一类的布局文件中引入ejs文件就可以直接使用，但是虽然功能更强，但代码量更大，性能损耗更多。具体如何取舍还看个人。比如我这网页有的手机跑起来就会比较卡，但是pc来讲一般都是没有问题的。 不蒜子流量统计真如官网所说，只用两行代码，一是引入js脚本，再就是使用12&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt; 为静态网站提供免费的流量统计服务，great~ css布局调整主要是为了给那些小布局腾出空间，另外适当对一些布局（背景A，日志宽度之类的）进行个人化调整。都是一些繁琐地F12中css的基础小操作，没必要详细写出来，之后完全可以按照个人喜好再做调整 其他其实还是有很多细节的修改，多余文件的删除，布局的调整，etc… 终语折腾了两三个礼拜的博客现在暂时算是可以使用了，一开始的预估时间只是一个礼拜随便弄弄，后来自己的小需求一点一点变多，外加没有前端基础，以及有别的功课需要学习，（手里的碧蓝航线也不能停，认真脸.jpg）所以一直有一搭没一搭地乱写着。之后要是用比较充裕的时间的话，会尝试将这个博客进一步优化，比如手机端的大头以及再添加一些小部件什么的。毕竟我讨厌极简主义XD。OK，可以全心去忙别的了oh yeah~","categories":[{"name":"Web前端","slug":"Web前端","permalink":"http://www.yansera.com/categories/Web前端/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.yansera.com/tags/Hexo/"},{"name":"Sooyaro","slug":"Sooyaro","permalink":"http://www.yansera.com/tags/Sooyaro/"}]},{"title":"今儿本博客就算是正式开张咯~","slug":"今儿本博客就算是正式开张咯","date":"2018-06-24T14:51:50.000Z","updated":"2018-07-09T14:21:22.060Z","comments":true,"path":"2018/06/24/今儿本博客就算是正式开张咯/","link":"","permalink":"http://www.yansera.com/2018/06/24/今儿本博客就算是正式开张咯/","excerpt":"断断续续弄了两三个礼拜，大致才把这个博客架设好。一开始的主要精力都在怎么选择框架上，在hexo和wordpress之间徘徊许久。最终还是选择可直接在Github上生成静态博客的框架—hexo，其实是因为超级简单23333。后面的时间主要还是用于在主题的选择和个人化的修改中，下一篇博文中将会详细讲述在所选主题中的修改。虽然现在还不能算是尽善尽美，但也勉强可以继续使用。","text":"断断续续弄了两三个礼拜，大致才把这个博客架设好。一开始的主要精力都在怎么选择框架上，在hexo和wordpress之间徘徊许久。最终还是选择可直接在Github上生成静态博客的框架—hexo，其实是因为超级简单23333。后面的时间主要还是用于在主题的选择和个人化的修改中，下一篇博文中将会详细讲述在所选主题中的修改。虽然现在还不能算是尽善尽美，但也勉强可以继续使用。 为什么开始写博客？主要为了服务于自己的学习计划，不虚度最近比较自由的时间监督自己学习，并且可以一定程度地归纳总结自己所思所学但愿能够坚持下去，不忘在私人订制的博客上装逼的初心 怎么做这个博客？ 空间：Github 搭建：Hexo + Sooyalo(ejs) 编辑：Markdown Language + html 评论：Disqus 这个博客会写什么？ 生活中的一些无关紧要的小事 漫评以及吐槽 体系化地技术笔记（这才是重点啊喂） so，这个博客就算是这么马马虎虎立下来了虽然暂时也感觉不会有什么人来看但是热情的人儿呦~欢迎来勾搭撒~ 宜しくお願いします","categories":[{"name":"吐槽","slug":"吐槽","permalink":"http://www.yansera.com/categories/吐槽/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://www.yansera.com/tags/Hexo/"},{"name":"生活","slug":"生活","permalink":"http://www.yansera.com/tags/生活/"}]}]}